{"dataset_id": 44591, "name": "eucalyptus_seed_3_nrows_2000_nclasses_10_ncols_100_stratify_True", "version": 1, "description": "Subsampling of the dataset eucalyptus (188) with\n\nseed=3\nargs.nrows=2000\nargs.ncols=100\nargs.nclasses=10\nargs.no_stratify=True\nGenerated with the following source code:\n\n\n```python\n    def subsample(\n        self,\n        seed: int,\n        nrows_max: int = 2_000,\n        ncols_max: int = 100,\n        nclasses_max: int = 10,\n        stratified: bool = True,\n    ) -> Dataset:\n        rng = np.random.default_rng(seed)\n\n        x = self.x\n        y = self.y\n\n        # Uniformly sample\n        classes = y.unique()\n        if len(classes) > nclasses_max:\n            vcs = y.value_counts()\n            selected_classes = rng.choice(\n                classes,\n                size=nclasses_max,\n                replace=False,\n                p=vcs / sum(vcs),\n            )\n\n            # Select the indices where one of these classes is present\n            idxs = y.index[y.isin(classes)]\n            x = x.iloc[idxs]\n            y = y.iloc[idxs]\n\n        # Uniformly sample columns if required\n        if len(x.columns) > ncols_max:\n            columns_idxs = rng.choice(\n                list(range(len(x.columns))), size=ncols_max, replace=False\n            )\n            sorted_column_idxs = sorted(columns_idxs)\n            selected_columns = list(x.columns[sorted_column_idxs])\n            x = x[selected_columns]\n        else:\n            sorted_column_idxs = list(range(len(x.columns)))\n\n        if len(x) > nrows_max:\n            # Stratify accordingly\n            target_name = y.name\n            data = pd.concat((x, y), axis=\"columns\")\n            _, subset = train_test_split(\n                data,\n                test_size=nrows_max,\n                stratify=data[target_name],\n                shuffle=True,\n                random_state=seed,\n            )\n            x = subset.drop(target_name, axis=\"columns\")\n            y = subset[target_name]\n\n        # We need to convert categorical columns to string for openml\n        categorical_mask = [self.categorical_mask[i] for i in sorted_column_idxs]\n        columns = list(x.columns)\n\n        return Dataset(\n            # Technically this is not the same but it's where it was derived from\n            dataset=self.dataset,\n            x=x,\n            y=y,\n            categorical_mask=categorical_mask,\n            columns=columns,\n        )\n```", "creator": "Eddie Bergman", "contributor": null, "collection_date": "2022-11-17", "upload_date": "2022-11-17T18:35:31", "language": "English", "license": "Public", "default_target_attribute": "Utility", "row_id_attribute": null, "ignore_attribute": null, "tags": null, "features": [{"index": 0, "name": "Abbrev", "data_type": "nominal", "nominal_values": ["Cra", "Cly", "Nga", "Wai", "K81", "Wak", "K82", "WSp", "K83", "Lon", "Puk", "Paw", "K81a", "Mor", "Wen", "WSh"], "number_missing_values": 0}, {"index": 1, "name": "Rep", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 2, "name": "Locality", "data_type": "nominal", "nominal_values": ["Central_Hawkes_Bay", "Northern_Hawkes_Bay", "Southern_Hawkes_Bay", "Central_Hawkes_Bay_(coastal)", "Central_Wairarapa", "South_Wairarapa", "Southern_Hawkes_Bay_(coastal)", "Central_Poverty_Bay"], "number_missing_values": 0}, {"index": 3, "name": "Map_Ref", "data_type": "nominal", "nominal_values": ["N135_382/137", "N116_848/985", "N145_874/586", "N142_377/957", "N158_344/626", "N162_081/300", "N158_343/625", "N151_912/221", "N162_097/424", "N166_063/197", "N146_273/737", "N141_295/063", "N98_539/567", "N151_922/226"], "number_missing_values": 0}, {"index": 4, "name": "Latitude", "data_type": "nominal", "nominal_values": ["39__38", "39__00", "40__11", "39__50", "40__57", "41__12", "40__36", "41__08", "41__16", "40__00", "39__43", "82__32"], "number_missing_values": 0}, {"index": 5, "name": "Altitude", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 6, "name": "Rainfall", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 7, "name": "Frosts", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 8, "name": "Year", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 9, "name": "Sp", "data_type": "nominal", "nominal_values": ["co", "fr", "ma", "nd", "ni", "ob", "ov", "pu", "rd", "si", "mn", "ag", "bxs", "br", "el", "fa", "jo", "ka", "re", "sm", "ro", "nc", "am", "cr", "pa", "ra", "te"], "number_missing_values": 0}, {"index": 10, "name": "PMCno", "data_type": "numeric", "nominal_values": null, "number_missing_values": 7}, {"index": 11, "name": "DBH", "data_type": "numeric", "nominal_values": null, "number_missing_values": 1}, {"index": 12, "name": "Ht", "data_type": "numeric", "nominal_values": null, "number_missing_values": 1}, {"index": 13, "name": "Surv", "data_type": "numeric", "nominal_values": null, "number_missing_values": 94}, {"index": 14, "name": "Vig", "data_type": "numeric", "nominal_values": null, "number_missing_values": 69}, {"index": 15, "name": "Ins_res", "data_type": "numeric", "nominal_values": null, "number_missing_values": 69}, {"index": 16, "name": "Stem_Fm", "data_type": "numeric", "nominal_values": null, "number_missing_values": 69}, {"index": 17, "name": "Crown_Fm", "data_type": "numeric", "nominal_values": null, "number_missing_values": 69}, {"index": 18, "name": "Brnch_Fm", "data_type": "numeric", "nominal_values": null, "number_missing_values": 69}, {"index": 19, "name": "Utility", "data_type": "nominal", "nominal_values": ["none", "low", "average", "good", "best"], "number_missing_values": 0}], "qualities": {"AutoCorrelation": 0.39319727891156464, "Dimensionality": 0.02717391304347826, "MajorityClassPercentage": 29.076086956521742, "MajorityClassSize": 214.0, "MinorityClassPercentage": 14.266304347826086, "MinorityClassSize": 105.0, "NumberOfBinaryFeatures": 0.0, "NumberOfClasses": 5.0, "NumberOfFeatures": 20.0, "NumberOfInstances": 736.0, "NumberOfInstancesWithMissingValues": 95.0, "NumberOfMissingValues": 448.0, "NumberOfNumericFeatures": 14.0, "NumberOfSymbolicFeatures": 6.0, "PercentageOfBinaryFeatures": 0.0, "PercentageOfInstancesWithMissingValues": 12.907608695652172, "PercentageOfMissingValues": 3.0434782608695654, "PercentageOfNumericFeatures": 70.0, "PercentageOfSymbolicFeatures": 30.0}}