{"dataset_id": 44533, "name": "dionis_seed_0_nrows_2000_nclasses_10_ncols_100_stratify_True", "version": 1, "description": "Subsampling of the dataset dionis (41167) with\n\nseed=0\nargs.nrows=2000\nargs.ncols=100\nargs.nclasses=10\nargs.no_stratify=True\nGenerated with the following source code:\n\n\n```python\n    def subsample(\n        self,\n        seed: int,\n        nrows_max: int = 2_000,\n        ncols_max: int = 100,\n        nclasses_max: int = 10,\n        stratified: bool = True,\n    ) -> Dataset:\n        rng = np.random.default_rng(seed)\n\n        x = self.x\n        y = self.y\n\n        # Uniformly sample\n        classes = y.unique()\n        if len(classes) > nclasses_max:\n            vcs = y.value_counts()\n            selected_classes = rng.choice(\n                classes,\n                size=nclasses_max,\n                replace=False,\n                p=vcs / sum(vcs),\n            )\n\n            # Select the indices where one of these classes is present\n            idxs = y.index[y.isin(classes)]\n            x = x.iloc[idxs]\n            y = y.iloc[idxs]\n\n        # Uniformly sample columns if required\n        if len(x.columns) > ncols_max:\n            columns_idxs = rng.choice(\n                list(range(len(x.columns))), size=ncols_max, replace=False\n            )\n            sorted_column_idxs = sorted(columns_idxs)\n            selected_columns = list(x.columns[sorted_column_idxs])\n            x = x[selected_columns]\n        else:\n            sorted_column_idxs = list(range(len(x.columns)))\n\n        if len(x) > nrows_max:\n            # Stratify accordingly\n            target_name = y.name\n            data = pd.concat((x, y), axis=\"columns\")\n            _, subset = train_test_split(\n                data,\n                test_size=nrows_max,\n                stratify=data[target_name],\n                shuffle=True,\n                random_state=seed,\n            )\n            x = subset.drop(target_name, axis=\"columns\")\n            y = subset[target_name]\n\n        # We need to convert categorical columns to string for openml\n        categorical_mask = [self.categorical_mask[i] for i in sorted_column_idxs]\n        columns = list(x.columns)\n\n        return Dataset(\n            # Technically this is not the same but it's where it was derived from\n            dataset=self.dataset,\n            x=x,\n            y=y,\n            categorical_mask=categorical_mask,\n            columns=columns,\n        )\n```", "creator": "Eddie Bergman", "contributor": null, "collection_date": "2022-11-17", "upload_date": "2022-11-17T18:26:00", "language": null, "license": "Public", "default_target_attribute": "class", "row_id_attribute": null, "ignore_attribute": null, "tags": null, "features": [{"index": 0, "name": "V1", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 1, "name": "V2", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 2, "name": "V3", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 3, "name": "V4", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 4, "name": "V5", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 5, "name": "V6", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 6, "name": "V7", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 7, "name": "V8", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 8, "name": "V9", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 9, "name": "V10", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 10, "name": "V11", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 11, "name": "V12", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 12, "name": "V13", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 13, "name": "V14", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 14, "name": "V15", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 15, "name": "V16", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 16, "name": "V17", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 17, "name": "V18", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 18, "name": "V19", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 19, "name": "V20", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 20, "name": "V21", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 21, "name": "V22", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 22, "name": "V23", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 23, "name": "V24", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 24, "name": "V25", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 25, "name": "V26", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 26, "name": "V27", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 27, "name": "V28", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 28, "name": "V29", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 29, "name": "V30", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 30, "name": "V31", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 31, "name": "V32", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 32, "name": "V33", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 33, "name": "V34", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 34, "name": "V35", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 35, "name": "V36", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 36, "name": "V37", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 37, "name": "V38", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 38, "name": "V39", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 39, "name": "V40", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 40, "name": "V41", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 41, "name": "V42", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 42, "name": "V43", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 43, "name": "V44", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 44, "name": "V45", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 45, "name": "V46", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 46, "name": "V47", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 47, "name": "V48", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 48, "name": "V49", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 49, "name": "V50", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 50, "name": "V51", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 51, "name": "V52", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 52, "name": "V53", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 53, "name": "V54", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 54, "name": "V55", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 55, "name": "V56", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 56, "name": "V57", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 57, "name": "V58", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 58, "name": "V59", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 59, "name": "V60", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 60, "name": "class", "data_type": "nominal", "nominal_values": ["0", "1", "10", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "11", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "12", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "13", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "14", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "15", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "16", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "17", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "18", "180", "181", "182", "183", "184", "185", "186", "187", "188", "189", "19", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "2", "20", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "21", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "22", "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "23", "230", "231", "232", "233", "234", "235", "236", "237", "238", "239", "24", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "25", "250", "251", "252", "253", "254", "255", "256", "257", "258", "259", "26", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "27", "270", "271", "272", "273", "274", "275", "276", "277", "278", "279", "28", "280", "281", "282", "283", "284", "285", "286", "287", "288", "289", "29", "290", "291", "292", "293", "294", "295", "296", "297", "298", "299", "3", "30", "300", "301", "302", "303", "304", "305", "306", "307", "308", "309", "31", "310", "311", "312", "313", "314", "315", "316", "317", "318", "319", "32", "320", "321", "322", "323", "324", "325", "326", "327", "328", "329", "33", "330", "331", "332", "333", "334", "335", "336", "337", "338", "339", "34", "340", "341", "342", "343", "344", "345", "346", "347", "348", "349", "35", "350", "351", "352", "353", "354", "36", "37", "38", "39", "4", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "5", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "6", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "7", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "8", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "9", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"], "number_missing_values": 0}], "qualities": {"AutoCorrelation": 0.0030015007503751876, "Dimensionality": 0.0305, "MajorityClassPercentage": 0.6, "MajorityClassSize": 12.0, "MinorityClassPercentage": 0.2, "MinorityClassSize": 4.0, "NumberOfBinaryFeatures": 0.0, "NumberOfClasses": 355.0, "NumberOfFeatures": 61.0, "NumberOfInstances": 2000.0, "NumberOfInstancesWithMissingValues": 0.0, "NumberOfMissingValues": 0.0, "NumberOfNumericFeatures": 60.0, "NumberOfSymbolicFeatures": 1.0, "PercentageOfBinaryFeatures": 0.0, "PercentageOfInstancesWithMissingValues": 0.0, "PercentageOfMissingValues": 0.0, "PercentageOfNumericFeatures": 98.36065573770492, "PercentageOfSymbolicFeatures": 1.639344262295082}}