{"dataset_id": 44528, "name": "airlines_seed_0_nrows_2000_nclasses_10_ncols_100_stratify_True", "version": 1, "description": "Subsampling of the dataset airlines (1169) with\n\nseed=0\nargs.nrows=2000\nargs.ncols=100\nargs.nclasses=10\nargs.no_stratify=True\nGenerated with the following source code:\n\n\n```python\n    def subsample(\n        self,\n        seed: int,\n        nrows_max: int = 2_000,\n        ncols_max: int = 100,\n        nclasses_max: int = 10,\n        stratified: bool = True,\n    ) -> Dataset:\n        rng = np.random.default_rng(seed)\n\n        x = self.x\n        y = self.y\n\n        # Uniformly sample\n        classes = y.unique()\n        if len(classes) > nclasses_max:\n            vcs = y.value_counts()\n            selected_classes = rng.choice(\n                classes,\n                size=nclasses_max,\n                replace=False,\n                p=vcs / sum(vcs),\n            )\n\n            # Select the indices where one of these classes is present\n            idxs = y.index[y.isin(classes)]\n            x = x.iloc[idxs]\n            y = y.iloc[idxs]\n\n        # Uniformly sample columns if required\n        if len(x.columns) > ncols_max:\n            columns_idxs = rng.choice(\n                list(range(len(x.columns))), size=ncols_max, replace=False\n            )\n            sorted_column_idxs = sorted(columns_idxs)\n            selected_columns = list(x.columns[sorted_column_idxs])\n            x = x[selected_columns]\n        else:\n            sorted_column_idxs = list(range(len(x.columns)))\n\n        if len(x) > nrows_max:\n            # Stratify accordingly\n            target_name = y.name\n            data = pd.concat((x, y), axis=\"columns\")\n            _, subset = train_test_split(\n                data,\n                test_size=nrows_max,\n                stratify=data[target_name],\n                shuffle=True,\n                random_state=seed,\n            )\n            x = subset.drop(target_name, axis=\"columns\")\n            y = subset[target_name]\n\n        # We need to convert categorical columns to string for openml\n        categorical_mask = [self.categorical_mask[i] for i in sorted_column_idxs]\n        columns = list(x.columns)\n\n        return Dataset(\n            # Technically this is not the same but it's where it was derived from\n            dataset=self.dataset,\n            x=x,\n            y=y,\n            categorical_mask=categorical_mask,\n            columns=columns,\n        )\n```", "creator": "Eddie Bergman", "contributor": null, "collection_date": "2022-11-17", "upload_date": "2022-11-17T18:25:36", "language": null, "license": "Public", "default_target_attribute": "Delay", "row_id_attribute": null, "ignore_attribute": null, "tags": null, "features": [{"index": 0, "name": "Airline", "data_type": "nominal", "nominal_values": ["US", "AA", "AS", "CO", "DL", "B6", "HA", "OO", "9E", "OH", "EV", "XE", "YV", "UA", "MQ", "FL", "F9", "WN"], "number_missing_values": 0}, {"index": 1, "name": "Flight", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 2, "name": "AirportFrom", "data_type": "nominal", "nominal_values": ["PHX", "LAX", "SFO", "ANC", "LAS", "SLC", "DEN", "ONT", "FAI", "BQN", "PSE", "HNL", "BIS", "IYK", "EWR", "BOS", "MKE", "GFK", "OMA", "GSO", "LMT", "SEA", "MCO", "TPA", "DLH", "MSP", "FAR", "MFE", "MSY", "VPS", "BWI", "MAF", "LWS", "RST", "ALB", "DSM", "CHS", "MSN", "JAX", "SAT", "PNS", "BHM", "LIT", "SAV", "BNA", "ICT", "ECP", "DHN", "MGM", "CAE", "PWM", "ACV", "EKO", "PHL", "ATL", "PDX", "RIC", "BTR", "HRL", "MYR", "TUS", "SBN", "CAK", "TVC", "CLE", "ORD", "DAY", "MFR", "BTV", "TLH", "TYS", "DFW", "FLL", "AUS", "CHA", "CMH", "LRD", "BRO", "CRP", "LAN", "PVD", "FWA", "JFK", "LGA", "OKC", "PIT", "PBI", "ORF", "DCA", "AEX", "SYR", "SHV", "VLD", "BDL", "FAT", "BZN", "RDM", "LFT", "IPL", "EAU", "ERI", "BUF", "IAH", "MCI", "AGS", "ABI", "GRR", "LBB", "CLT", "LEX", "MBS", "MOD", "AMA", "SGF", "AZO", "ABE", "SWF", "BGM", "AVP", "FNT", "GSP", "ATW", "ITH", "TUL", "COS", "ELP", "ABQ", "SMF", "STL", "IAD", "DTW", "RDU", "RSW", "OAK", "ROC", "IND", "CVG", "MDW", "SDF", "ABY", "TRI", "XNA", "ROA", "MLI", "LYH", "EVV", "HPN", "FAY", "EWN", "CSG", "GPT", "MLU", "MOB", "OAJ", "CHO", "ILM", "BMI", "PHF", "ACY", "JAN", "CID", "GRK", "HOU", "CRW", "HTS", "PSC", "BOI", "SBP", "CLD", "PSP", "SBA", "MEM", "MRY", "GEG", "RDD", "PAH", "CMX", "SPI", "EUG", "CIC", "PIH", "SGU", "COD", "MIA", "MHT", "GRB", "FSD", "SJU", "AVL", "BFL", "RAP", "DRO", "PIA", "OGG", "SIT", "TXK", "RNO", "DAL", "SCE", "MEI", "MDT", "FCA", "SJC", "KOA", "PLN", "SAN", "GNV", "HLN", "GJT", "CPR", "FSM", "CMI", "GTF", "HDN", "ITO", "MTJ", "HSV", "BTM", "BIL", "COU", "MSO", "SMX", "TWF", "ISP", "GCC", "LIH", "LNK", "DAB", "SNA", "MQT", "LGB", "CWA", "LSE", "BUR", "ACT", "MHK", "MOT", "IDA", "SUN", "GTR", "MLB", "SRQ", "JAC", "ASE", "LCH", "JNU", "ROW", "BQK", "YUM", "FLG", "EGE", "GUC", "EYW", "RKS", "BGR", "ELM", "ADQ", "OTZ", "OTH", "STT", "KTN", "BET", "SJT", "CDC", "CEC", "SPS", "SCC", "STX", "OME", "MKG", "WRG", "TYR", "BRW", "GGG", "PSG", "BKG", "YAK", "CLL", "SAF", "CYS", "LWB", "CDV", "FLO", "BLI", "DBQ", "TOL", "UTM", "PIE", "ADK", "ABR", "TEX", "MMH", "GUM"], "number_missing_values": 0}, {"index": 3, "name": "AirportTo", "data_type": "nominal", "nominal_values": ["CLT", "DFW", "SEA", "IAH", "MSP", "DTW", "ORD", "ATL", "PDX", "JFK", "SLC", "HNL", "PHX", "MCO", "OGG", "LAX", "KOA", "ITO", "SFO", "MIA", "IAD", "SMF", "PHL", "LIH", "DEN", "LGA", "MEM", "CVG", "YUM", "CWA", "MKE", "BQN", "FAI", "LAS", "ANC", "BOS", "LGB", "FLL", "SJU", "EWR", "DCA", "BWI", "RDU", "MCI", "TYS", "SAN", "ONT", "OAK", "MDW", "BNA", "DAL", "CLE", "JAX", "JNU", "RNO", "ELP", "SAT", "OTZ", "MBS", "BDL", "STL", "HOU", "AUS", "SNA", "SJC", "LIT", "TUS", "TUL", "CMH", "LAN", "IND", "AMA", "CRP", "PIT", "RKS", "FWA", "TPA", "PBI", "JAN", "DSM", "ADQ", "GRB", "PVD", "ABQ", "SDF", "RSW", "MSY", "BUR", "BOI", "TLH", "BHM", "ACV", "ORF", "BET", "KTN", "RIC", "SRQ", "BTR", "XNA", "MHT", "GRR", "SBN", "SBA", "ROA", "CID", "GPT", "MFR", "SGU", "HPN", "OMA", "OTH", "GSP", "LMT", "BUF", "MSN", "BFL", "CAE", "HRL", "OKC", "SYR", "COS", "BTV", "CDC", "SCC", "DAY", "SJT", "TVC", "ROC", "ISP", "MRY", "SBP", "MLI", "MOB", "CIC", "SAV", "FAT", "EKO", "GEG", "ECP", "LFT", "SUN", "HSV", "SHV", "CHA", "CAK", "BZN", "MAF", "GSO", "MDT", "PHF", "ICT", "AZO", "RAP", "CHS", "CLD", "MKG", "VPS", "PIH", "ATW", "AGS", "PNS", "BIL", "SPI", "FAR", "CPR", "PIA", "SPS", "TWF", "LBB", "ALB", "CEC", "DRO", "GJT", "GNV", "RST", "AVL", "GRK", "PSP", "LEX", "TRI", "SGF", "FSM", "RDD", "OME", "MFE", "LSE", "BMI", "MYR", "FAY", "FSD", "EUG", "MGM", "EVV", "MLB", "FNT", "STT", "WRG", "ABE", "BIS", "MOT", "MLU", "GFK", "RDM", "COU", "LRD", "PSC", "MOD", "PWM", "ILM", "ABY", "CRW", "TXK", "BRO", "BRW", "EYW", "DAB", "ROW", "ABI", "EAU", "TYR", "MSO", "FLG", "CSG", "VLD", "DHN", "OAJ", "AEX", "CHO", "SAF", "GGG", "FCA", "ASE", "BKG", "MHK", "LNK", "MQT", "YAK", "GTR", "SMX", "SWF", "ITH", "AVP", "ELM", "BGM", "SIT", "PSG", "CYS", "CLL", "SCE", "LWB", "LCH", "GCC", "IYK", "LWS", "COD", "HLN", "BQK", "GTF", "DLH", "BTM", "EGE", "IDA", "JAC", "HDN", "MTJ", "CMX", "CMI", "CDV", "LYH", "ACT", "STX", "IPL", "PAH", "HTS", "MEI", "BLI", "ERI", "EWN", "FLO", "ACY", "DBQ", "TOL", "GUC", "PLN", "BGR", "PSE", "PIE", "UTM", "ADK", "ABR", "TEX", "MMH", "GUM"], "number_missing_values": 0}, {"index": 4, "name": "DayOfWeek", "data_type": "nominal", "nominal_values": ["1", "2", "3", "4", "5", "6", "7"], "number_missing_values": 0}, {"index": 5, "name": "Time", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 6, "name": "Length", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 7, "name": "Delay", "data_type": "nominal", "nominal_values": ["0", "1"], "number_missing_values": 0}], "qualities": {"AutoCorrelation": 0.49874937468734365, "Dimensionality": 0.004, "MajorityClassPercentage": 55.45, "MajorityClassSize": 1109.0, "MinorityClassPercentage": 44.55, "MinorityClassSize": 891.0, "NumberOfBinaryFeatures": 1.0, "NumberOfClasses": 2.0, "NumberOfFeatures": 8.0, "NumberOfInstances": 2000.0, "NumberOfInstancesWithMissingValues": 0.0, "NumberOfMissingValues": 0.0, "NumberOfNumericFeatures": 3.0, "NumberOfSymbolicFeatures": 5.0, "PercentageOfBinaryFeatures": 12.5, "PercentageOfInstancesWithMissingValues": 0.0, "PercentageOfMissingValues": 0.0, "PercentageOfNumericFeatures": 37.5, "PercentageOfSymbolicFeatures": 62.5}}