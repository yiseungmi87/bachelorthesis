{"dataset_id": 44637, "name": "segment_seed_4_nrows_2000_nclasses_10_ncols_100_stratify_True", "version": 1, "description": "Subsampling of the dataset segment (40984) with\n\nseed=4\nargs.nrows=2000\nargs.ncols=100\nargs.nclasses=10\nargs.no_stratify=True\nGenerated with the following source code:\n\n\n```python\n    def subsample(\n        self,\n        seed: int,\n        nrows_max: int = 2_000,\n        ncols_max: int = 100,\n        nclasses_max: int = 10,\n        stratified: bool = True,\n    ) -> Dataset:\n        rng = np.random.default_rng(seed)\n\n        x = self.x\n        y = self.y\n\n        # Uniformly sample\n        classes = y.unique()\n        if len(classes) > nclasses_max:\n            vcs = y.value_counts()\n            selected_classes = rng.choice(\n                classes,\n                size=nclasses_max,\n                replace=False,\n                p=vcs / sum(vcs),\n            )\n\n            # Select the indices where one of these classes is present\n            idxs = y.index[y.isin(classes)]\n            x = x.iloc[idxs]\n            y = y.iloc[idxs]\n\n        # Uniformly sample columns if required\n        if len(x.columns) > ncols_max:\n            columns_idxs = rng.choice(\n                list(range(len(x.columns))), size=ncols_max, replace=False\n            )\n            sorted_column_idxs = sorted(columns_idxs)\n            selected_columns = list(x.columns[sorted_column_idxs])\n            x = x[selected_columns]\n        else:\n            sorted_column_idxs = list(range(len(x.columns)))\n\n        if len(x) > nrows_max:\n            # Stratify accordingly\n            target_name = y.name\n            data = pd.concat((x, y), axis=\"columns\")\n            _, subset = train_test_split(\n                data,\n                test_size=nrows_max,\n                stratify=data[target_name],\n                shuffle=True,\n                random_state=seed,\n            )\n            x = subset.drop(target_name, axis=\"columns\")\n            y = subset[target_name]\n\n        # We need to convert categorical columns to string for openml\n        categorical_mask = [self.categorical_mask[i] for i in sorted_column_idxs]\n        columns = list(x.columns)\n\n        return Dataset(\n            # Technically this is not the same but it's where it was derived from\n            dataset=self.dataset,\n            x=x,\n            y=y,\n            categorical_mask=categorical_mask,\n            columns=columns,\n        )\n```", "creator": "Eddie Bergman", "contributor": null, "collection_date": "2022-11-17", "upload_date": "2022-11-17T18:39:02", "language": null, "license": "Public", "default_target_attribute": "class", "row_id_attribute": null, "ignore_attribute": null, "tags": null, "features": [{"index": 0, "name": "short.line.density.5", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 1, "name": "short.line.density.2", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 2, "name": "vedge.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 3, "name": "vegde.sd", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 4, "name": "hedge.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 5, "name": "hedge.sd", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 6, "name": "intensity.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 7, "name": "rawred.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 8, "name": "rawblue.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 9, "name": "rawgreen.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 10, "name": "exred.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 11, "name": "exblue.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 12, "name": "exgreen.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 13, "name": "value.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 14, "name": "saturation.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 15, "name": "hue.mean", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 16, "name": "class", "data_type": "nominal", "nominal_values": ["brickface", "sky", "foliage", "cement", "window", "path", "grass"], "number_missing_values": 0}], "qualities": {"AutoCorrelation": 0.144072036018009, "Dimensionality": 0.0085, "MajorityClassPercentage": 14.299999999999999, "MajorityClassSize": 286.0, "MinorityClassPercentage": 14.249999999999998, "MinorityClassSize": 285.0, "NumberOfBinaryFeatures": 0.0, "NumberOfClasses": 7.0, "NumberOfFeatures": 17.0, "NumberOfInstances": 2000.0, "NumberOfInstancesWithMissingValues": 0.0, "NumberOfMissingValues": 0.0, "NumberOfNumericFeatures": 16.0, "NumberOfSymbolicFeatures": 1.0, "PercentageOfBinaryFeatures": 0.0, "PercentageOfInstancesWithMissingValues": 0.0, "PercentageOfMissingValues": 0.0, "PercentageOfNumericFeatures": 94.11764705882352, "PercentageOfSymbolicFeatures": 5.88235294117647}}