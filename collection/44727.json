{"dataset_id": 44727, "name": "adult_seed_4_nrows_2000_nclasses_10_ncols_100_stratify_True", "version": 1, "description": "Subsampling of the dataset adult (1590) with\n\nseed=4\nargs.nrows=2000\nargs.ncols=100\nargs.nclasses=10\nargs.no_stratify=True\nGenerated with the following source code:\n\n\n```python\n    def subsample(\n        self,\n        seed: int,\n        nrows_max: int = 2_000,\n        ncols_max: int = 100,\n        nclasses_max: int = 10,\n        stratified: bool = True,\n    ) -> Dataset:\n        rng = np.random.default_rng(seed)\n\n        x = self.x\n        y = self.y\n\n        # Uniformly sample\n        classes = y.unique()\n        if len(classes) > nclasses_max:\n            vcs = y.value_counts()\n            selected_classes = rng.choice(\n                classes,\n                size=nclasses_max,\n                replace=False,\n                p=vcs / sum(vcs),\n            )\n\n            # Select the indices where one of these classes is present\n            idxs = y.index[y.isin(classes)]\n            x = x.iloc[idxs]\n            y = y.iloc[idxs]\n\n        # Uniformly sample columns if required\n        if len(x.columns) > ncols_max:\n            columns_idxs = rng.choice(\n                list(range(len(x.columns))), size=ncols_max, replace=False\n            )\n            sorted_column_idxs = sorted(columns_idxs)\n            selected_columns = list(x.columns[sorted_column_idxs])\n            x = x[selected_columns]\n        else:\n            sorted_column_idxs = list(range(len(x.columns)))\n\n        if len(x) > nrows_max:\n            # Stratify accordingly\n            target_name = y.name\n            data = pd.concat((x, y), axis=\"columns\")\n            _, subset = train_test_split(\n                data,\n                test_size=nrows_max,\n                stratify=data[target_name],\n                shuffle=True,\n                random_state=seed,\n            )\n            x = subset.drop(target_name, axis=\"columns\")\n            y = subset[target_name]\n\n        # We need to convert categorical columns to string for openml\n        categorical_mask = [self.categorical_mask[i] for i in sorted_column_idxs]\n        columns = list(x.columns)\n\n        return Dataset(\n            # Technically this is not the same but it's where it was derived from\n            dataset=self.dataset,\n            x=x,\n            y=y,\n            categorical_mask=categorical_mask,\n            columns=columns,\n        )\n```", "creator": "Eddie Bergman", "contributor": null, "collection_date": "2022-11-17", "upload_date": "2022-11-17T18:46:09", "language": null, "license": "Public", "default_target_attribute": "class", "row_id_attribute": null, "ignore_attribute": null, "tags": null, "features": [{"index": 0, "name": "age", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 1, "name": "workclass", "data_type": "nominal", "nominal_values": ["Private", "Self-emp-not-inc", "Self-emp-inc", "Federal-gov", "Local-gov", "State-gov", "Without-pay", "Never-worked"], "number_missing_values": 112}, {"index": 2, "name": "fnlwgt", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 3, "name": "education", "data_type": "nominal", "nominal_values": ["Bachelors", "Some-college", "11th", "HS-grad", "Prof-school", "Assoc-acdm", "Assoc-voc", "9th", "7th-8th", "12th", "Masters", "1st-4th", "10th", "Doctorate", "5th-6th", "Preschool"], "number_missing_values": 0}, {"index": 4, "name": "education-num", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 5, "name": "marital-status", "data_type": "nominal", "nominal_values": ["Married-civ-spouse", "Divorced", "Never-married", "Separated", "Widowed", "Married-spouse-absent", "Married-AF-spouse"], "number_missing_values": 0}, {"index": 6, "name": "occupation", "data_type": "nominal", "nominal_values": ["Tech-support", "Craft-repair", "Other-service", "Sales", "Exec-managerial", "Prof-specialty", "Handlers-cleaners", "Machine-op-inspct", "Adm-clerical", "Farming-fishing", "Transport-moving", "Priv-house-serv", "Protective-serv", "Armed-Forces"], "number_missing_values": 112}, {"index": 7, "name": "relationship", "data_type": "nominal", "nominal_values": ["Wife", "Own-child", "Husband", "Not-in-family", "Other-relative", "Unmarried"], "number_missing_values": 0}, {"index": 8, "name": "race", "data_type": "nominal", "nominal_values": ["White", "Asian-Pac-Islander", "Amer-Indian-Eskimo", "Other", "Black"], "number_missing_values": 0}, {"index": 9, "name": "sex", "data_type": "nominal", "nominal_values": ["Female", "Male"], "number_missing_values": 0}, {"index": 10, "name": "capital-gain", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 11, "name": "capital-loss", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 12, "name": "hours-per-week", "data_type": "numeric", "nominal_values": null, "number_missing_values": 0}, {"index": 13, "name": "native-country", "data_type": "nominal", "nominal_values": ["United-States", "Cambodia", "England", "Puerto-Rico", "Canada", "Germany", "Outlying-US(Guam-USVI-etc)", "India", "Japan", "Greece", "South", "China", "Cuba", "Iran", "Honduras", "Philippines", "Italy", "Poland", "Jamaica", "Vietnam", "Mexico", "Portugal", "Ireland", "France", "Dominican-Republic", "Laos", "Ecuador", "Taiwan", "Haiti", "Columbia", "Hungary", "Guatemala", "Nicaragua", "Scotland", "Thailand", "Yugoslavia", "El-Salvador", "Trinadad&Tobago", "Peru", "Hong", "Holand-Netherlands"], "number_missing_values": 29}, {"index": 14, "name": "class", "data_type": "nominal", "nominal_values": [">50K", "<=50K"], "number_missing_values": 0}], "qualities": {"AutoCorrelation": 0.6248124062031015, "Dimensionality": 0.0075, "MajorityClassPercentage": 76.05, "MajorityClassSize": 1521.0, "MinorityClassPercentage": 23.95, "MinorityClassSize": 479.0, "NumberOfBinaryFeatures": 2.0, "NumberOfClasses": 2.0, "NumberOfFeatures": 15.0, "NumberOfInstances": 2000.0, "NumberOfInstancesWithMissingValues": 140.0, "NumberOfMissingValues": 253.0, "NumberOfNumericFeatures": 6.0, "NumberOfSymbolicFeatures": 9.0, "PercentageOfBinaryFeatures": 13.333333333333334, "PercentageOfInstancesWithMissingValues": 7.000000000000001, "PercentageOfMissingValues": 0.8433333333333333, "PercentageOfNumericFeatures": 40.0, "PercentageOfSymbolicFeatures": 60.0}}